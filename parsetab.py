
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left+-left*/rightUMINUSELSE EQUAL GREATER ID IF INT LESS NUMBER RETURN UNEQUAL VOID WHILEProgarm : DeclareStrDeclareStr : Declare TDeclareDeclare : INT ID DeclareFun\n               | INT ID DeclareType\n               | VOID ID DeclareFun TDeclare : empty\n                | Declare TDeclare DeclareType : ';'DeclareFun : '(' FormalPara ')' BlockFormalPara : ParaTable \n                  | VOID ParaTable : Parameter TParaTable TParaTable : empty\n                  | ',' Parameter TParaTable Parameter : INT IDBlock : '{' LangStr TLangStr '}'TLangStr : empty \n                | LangStr TLangStrLangStr : InterDeclare \n               | InterStrInterDeclare : InterVarDeclare ';' InterVarDeclare : INT IDInterStr : Sentence Sentence : IfSentence \n                | WhileSentence \n                | ReturnSentence\n                | AssignSentence AssignSentence : ID '=' Expression ';' ReturnSentence : RETURN ';'\n                      | RETURN Expression ';' WhileSentence : WHILE  M '(' Expression ')' M BlockM : emptyS : emptyIfSentence : IF '(' Expression ')' M Block N M ElseSentenceN : emptyElseSentence : empty\n                    | ELSE BlockExpression : AddExpression \n                  | AddExpression '<' AddExpression\n                  | AddExpression LESS AddExpression\n                  | AddExpression '>' AddExpression\n                  | AddExpression GREATER AddExpression\n                  | AddExpression EQUAL AddExpression\n                  | AddExpression UNEQUAL AddExpression\n                  Expression : '-' Expression %prec UMINUSAddExpression : Term\n                     | Term '+' Term\n                     | Term '-' Term Term : Factor\n            | Factor '*' Factor\n            | Factor '/' Factor Factor : NUMBER\n              | '(' Expression ')' \n              | ID FTYPE FTYPE : Call\n             | empty Call : '(' RealPara ')'RealPara : RealParaTable\n                | empty RealParaTable : Para TRealParaTableTRealParaTable : ',' Para TRealParaTable\n                      | empty Para : Expression empty : "
    
_lr_action_items = {'INT':([0,3,6,12,13,14,15,16,25,27,28,30,31,32,34,37,38,39,40,45,48,53,54,64,68,85,110,113,114,115,117,118,119,121,],[4,4,4,-3,-4,21,-8,-5,21,-9,35,35,-19,-20,-23,-24,-25,-26,-27,35,-21,-32,-29,-16,-30,-28,-64,-64,-35,-31,-64,-34,-36,-37,]),'VOID':([0,3,6,12,13,14,15,16,27,64,],[5,5,5,-3,-4,19,-8,-5,-9,-16,]),'$end':([1,2,3,6,7,8,11,12,13,15,16,27,64,],[0,-1,-64,-64,-2,-6,-7,-3,-4,-8,-5,-9,-16,]),'ID':([4,5,21,28,30,31,32,34,35,37,38,39,40,43,45,48,50,51,53,54,57,61,64,67,68,69,70,71,72,73,74,76,77,78,79,84,85,108,110,113,114,115,117,118,119,121,],[9,10,26,36,36,-19,-20,-23,49,-24,-25,-26,-27,62,36,-21,62,62,-32,-29,62,62,-16,62,-30,62,62,62,62,62,62,62,62,62,62,62,-28,62,-64,-64,-35,-31,-64,-34,-36,-37,]),'(':([9,10,41,42,43,50,51,52,53,57,61,62,67,69,70,71,72,73,74,76,77,78,79,84,108,],[14,14,51,-64,61,61,61,67,-32,61,61,84,61,61,61,61,61,61,61,61,61,61,61,61,61,]),';':([9,33,43,49,55,56,58,59,60,62,65,75,81,82,83,88,89,90,91,92,93,94,95,96,97,98,106,],[15,48,54,-22,68,-38,-46,-49,-52,-64,85,-45,-54,-55,-56,-39,-40,-41,-42,-43,-44,-47,-48,-50,-51,-53,-57,]),')':([17,18,19,20,23,24,26,29,44,56,58,59,60,62,66,75,80,81,82,83,84,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,106,107,109,112,116,],[22,-10,-11,-64,-12,-13,-15,-64,-14,-38,-46,-49,-52,-64,86,-45,98,-54,-55,-56,-64,105,-39,-40,-41,-42,-43,-44,-47,-48,-50,-51,-53,106,-58,-59,-64,-63,-57,-60,-62,-64,-61,]),',':([20,26,29,56,58,59,60,62,75,81,82,83,88,89,90,91,92,93,94,95,96,97,98,102,103,106,112,],[25,-15,25,-38,-46,-49,-52,-64,-45,-54,-55,-56,-39,-40,-41,-42,-43,-44,-47,-48,-50,-51,-53,108,-63,-57,108,]),'{':([22,53,86,104,105,111,120,],[28,-32,-64,28,-64,28,28,]),'IF':([28,30,31,32,34,37,38,39,40,45,48,53,54,64,68,85,110,113,114,115,117,118,119,121,],[41,41,-19,-20,-23,-24,-25,-26,-27,41,-21,-32,-29,-16,-30,-28,-64,-64,-35,-31,-64,-34,-36,-37,]),'WHILE':([28,30,31,32,34,37,38,39,40,45,48,53,54,64,68,85,110,113,114,115,117,118,119,121,],[42,42,-19,-20,-23,-24,-25,-26,-27,42,-21,-32,-29,-16,-30,-28,-64,-64,-35,-31,-64,-34,-36,-37,]),'RETURN':([28,30,31,32,34,37,38,39,40,45,48,53,54,64,68,85,110,113,114,115,117,118,119,121,],[43,43,-19,-20,-23,-24,-25,-26,-27,43,-21,-32,-29,-16,-30,-28,-64,-64,-35,-31,-64,-34,-36,-37,]),'}':([30,31,32,34,37,38,39,40,45,46,47,48,53,54,63,64,68,85,110,113,114,115,117,118,119,121,],[-64,-19,-20,-23,-24,-25,-26,-27,-64,64,-17,-21,-32,-29,-18,-16,-30,-28,-64,-64,-35,-31,-64,-34,-36,-37,]),'=':([36,],[50,]),'-':([43,50,51,57,58,59,60,61,62,67,81,82,83,84,96,97,98,106,108,],[57,57,57,57,77,-49,-52,57,-64,57,-54,-55,-56,57,-50,-51,-53,-57,57,]),'NUMBER':([43,50,51,57,61,67,69,70,71,72,73,74,76,77,78,79,84,108,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'ELSE':([53,64,110,113,114,117,],[-32,-16,-64,-64,-35,120,]),'<':([56,58,59,60,62,81,82,83,94,95,96,97,98,106,],[69,-46,-49,-52,-64,-54,-55,-56,-47,-48,-50,-51,-53,-57,]),'LESS':([56,58,59,60,62,81,82,83,94,95,96,97,98,106,],[70,-46,-49,-52,-64,-54,-55,-56,-47,-48,-50,-51,-53,-57,]),'>':([56,58,59,60,62,81,82,83,94,95,96,97,98,106,],[71,-46,-49,-52,-64,-54,-55,-56,-47,-48,-50,-51,-53,-57,]),'GREATER':([56,58,59,60,62,81,82,83,94,95,96,97,98,106,],[72,-46,-49,-52,-64,-54,-55,-56,-47,-48,-50,-51,-53,-57,]),'EQUAL':([56,58,59,60,62,81,82,83,94,95,96,97,98,106,],[73,-46,-49,-52,-64,-54,-55,-56,-47,-48,-50,-51,-53,-57,]),'UNEQUAL':([56,58,59,60,62,81,82,83,94,95,96,97,98,106,],[74,-46,-49,-52,-64,-54,-55,-56,-47,-48,-50,-51,-53,-57,]),'+':([58,59,60,62,81,82,83,96,97,98,106,],[76,-49,-52,-64,-54,-55,-56,-50,-51,-53,-57,]),'*':([59,60,62,81,82,83,98,106,],[78,-52,-64,-54,-55,-56,-53,-57,]),'/':([59,60,62,81,82,83,98,106,],[79,-52,-64,-54,-55,-56,-53,-57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Progarm':([0,],[1,]),'DeclareStr':([0,],[2,]),'Declare':([0,3,6,],[3,6,6,]),'TDeclare':([3,6,],[7,11,]),'empty':([3,6,20,29,30,42,45,62,84,86,102,105,110,112,113,117,],[8,8,24,24,47,53,47,83,101,53,109,53,114,109,53,119,]),'DeclareFun':([9,10,],[12,16,]),'DeclareType':([9,],[13,]),'FormalPara':([14,],[17,]),'ParaTable':([14,],[18,]),'Parameter':([14,25,],[20,29,]),'TParaTable':([20,29,],[23,44,]),'Block':([22,104,111,120,],[27,110,115,121,]),'LangStr':([28,30,45,],[30,45,45,]),'InterDeclare':([28,30,45,],[31,31,31,]),'InterStr':([28,30,45,],[32,32,32,]),'InterVarDeclare':([28,30,45,],[33,33,33,]),'Sentence':([28,30,45,],[34,34,34,]),'IfSentence':([28,30,45,],[37,37,37,]),'WhileSentence':([28,30,45,],[38,38,38,]),'ReturnSentence':([28,30,45,],[39,39,39,]),'AssignSentence':([28,30,45,],[40,40,40,]),'TLangStr':([30,45,],[46,63,]),'M':([42,86,105,113,],[52,104,111,117,]),'Expression':([43,50,51,57,61,67,84,108,],[55,65,66,75,80,87,103,103,]),'AddExpression':([43,50,51,57,61,67,69,70,71,72,73,74,84,108,],[56,56,56,56,56,56,88,89,90,91,92,93,56,56,]),'Term':([43,50,51,57,61,67,69,70,71,72,73,74,76,77,84,108,],[58,58,58,58,58,58,58,58,58,58,58,58,94,95,58,58,]),'Factor':([43,50,51,57,61,67,69,70,71,72,73,74,76,77,78,79,84,108,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,96,97,59,59,]),'FTYPE':([62,],[81,]),'Call':([62,],[82,]),'RealPara':([84,],[99,]),'RealParaTable':([84,],[100,]),'Para':([84,108,],[102,112,]),'TRealParaTable':([102,112,],[107,116,]),'N':([110,],[113,]),'ElseSentence':([117,],[118,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Progarm","S'",1,None,None,None),
  ('Progarm -> DeclareStr','Progarm',1,'p_Program','Compiler.py',108),
  ('DeclareStr -> Declare TDeclare','DeclareStr',2,'p_DeclareStr','Compiler.py',112),
  ('Declare -> INT ID DeclareFun','Declare',3,'p_Declare','Compiler.py',116),
  ('Declare -> INT ID DeclareType','Declare',3,'p_Declare','Compiler.py',117),
  ('Declare -> VOID ID DeclareFun','Declare',3,'p_Declare','Compiler.py',118),
  ('TDeclare -> empty','TDeclare',1,'p_TDeclare','Compiler.py',139),
  ('TDeclare -> Declare TDeclare','TDeclare',2,'p_TDeclare','Compiler.py',140),
  ('DeclareType -> ;','DeclareType',1,'p_DeclareType','Compiler.py',143),
  ('DeclareFun -> ( FormalPara ) Block','DeclareFun',4,'p_DeclareFun','Compiler.py',148),
  ('FormalPara -> ParaTable','FormalPara',1,'p_FormalPara','Compiler.py',153),
  ('FormalPara -> VOID','FormalPara',1,'p_FormalPara','Compiler.py',154),
  ('ParaTable -> Parameter TParaTable','ParaTable',2,'p_ParaTable','Compiler.py',159),
  ('TParaTable -> empty','TParaTable',1,'p_TParaTable','Compiler.py',163),
  ('TParaTable -> , Parameter TParaTable','TParaTable',3,'p_TParaTable','Compiler.py',164),
  ('Parameter -> INT ID','Parameter',2,'p_Parameter','Compiler.py',167),
  ('Block -> { LangStr TLangStr }','Block',4,'p_Block','Compiler.py',176),
  ('TLangStr -> empty','TLangStr',1,'p_TLangStr','Compiler.py',180),
  ('TLangStr -> LangStr TLangStr','TLangStr',2,'p_TLangStr','Compiler.py',181),
  ('LangStr -> InterDeclare','LangStr',1,'p_LangStr','Compiler.py',185),
  ('LangStr -> InterStr','LangStr',1,'p_LangStr','Compiler.py',186),
  ('InterDeclare -> InterVarDeclare ;','InterDeclare',2,'p_InterDeclare','Compiler.py',190),
  ('InterVarDeclare -> INT ID','InterVarDeclare',2,'p_InterVarDeclare','Compiler.py',196),
  ('InterStr -> Sentence','InterStr',1,'p_InterStr','Compiler.py',210),
  ('Sentence -> IfSentence','Sentence',1,'p_Sentence','Compiler.py',214),
  ('Sentence -> WhileSentence','Sentence',1,'p_Sentence','Compiler.py',215),
  ('Sentence -> ReturnSentence','Sentence',1,'p_Sentence','Compiler.py',216),
  ('Sentence -> AssignSentence','Sentence',1,'p_Sentence','Compiler.py',217),
  ('AssignSentence -> ID = Expression ;','AssignSentence',4,'p_AssignSentence','Compiler.py',221),
  ('ReturnSentence -> RETURN ;','ReturnSentence',2,'p_ReturnSentence','Compiler.py',234),
  ('ReturnSentence -> RETURN Expression ;','ReturnSentence',3,'p_ReturnSentence','Compiler.py',235),
  ('WhileSentence -> WHILE M ( Expression ) M Block','WhileSentence',7,'p_WhileSentence','Compiler.py',245),
  ('M -> empty','M',1,'p_M','Compiler.py',265),
  ('S -> empty','S',1,'p_S','Compiler.py',269),
  ('IfSentence -> IF ( Expression ) M Block N M ElseSentence','IfSentence',9,'p_IfSentence','Compiler.py',273),
  ('N -> empty','N',1,'p_N','Compiler.py',291),
  ('ElseSentence -> empty','ElseSentence',1,'p_ElseSentence','Compiler.py',298),
  ('ElseSentence -> ELSE Block','ElseSentence',2,'p_ElseSentence','Compiler.py',299),
  ('Expression -> AddExpression','Expression',1,'p_Expression','Compiler.py',304),
  ('Expression -> AddExpression < AddExpression','Expression',3,'p_Expression','Compiler.py',305),
  ('Expression -> AddExpression LESS AddExpression','Expression',3,'p_Expression','Compiler.py',306),
  ('Expression -> AddExpression > AddExpression','Expression',3,'p_Expression','Compiler.py',307),
  ('Expression -> AddExpression GREATER AddExpression','Expression',3,'p_Expression','Compiler.py',308),
  ('Expression -> AddExpression EQUAL AddExpression','Expression',3,'p_Expression','Compiler.py',309),
  ('Expression -> AddExpression UNEQUAL AddExpression','Expression',3,'p_Expression','Compiler.py',310),
  ('Expression -> - Expression','Expression',2,'p_Expression_uminus','Compiler.py',386),
  ('AddExpression -> Term','AddExpression',1,'p_AddExpression','Compiler.py',391),
  ('AddExpression -> Term + Term','AddExpression',3,'p_AddExpression','Compiler.py',392),
  ('AddExpression -> Term - Term','AddExpression',3,'p_AddExpression','Compiler.py',393),
  ('Term -> Factor','Term',1,'p_Term','Compiler.py',413),
  ('Term -> Factor * Factor','Term',3,'p_Term','Compiler.py',414),
  ('Term -> Factor / Factor','Term',3,'p_Term','Compiler.py',415),
  ('Factor -> NUMBER','Factor',1,'p_Factor','Compiler.py',436),
  ('Factor -> ( Expression )','Factor',3,'p_Factor','Compiler.py',437),
  ('Factor -> ID FTYPE','Factor',2,'p_Factor','Compiler.py',438),
  ('FTYPE -> Call','FTYPE',1,'p_FTYPE','Compiler.py',455),
  ('FTYPE -> empty','FTYPE',1,'p_FTYPE','Compiler.py',456),
  ('Call -> ( RealPara )','Call',3,'p_Call','Compiler.py',464),
  ('RealPara -> RealParaTable','RealPara',1,'p_RealPara','Compiler.py',469),
  ('RealPara -> empty','RealPara',1,'p_RealPara','Compiler.py',470),
  ('RealParaTable -> Para TRealParaTable','RealParaTable',2,'p_RealParaTable','Compiler.py',474),
  ('TRealParaTable -> , Para TRealParaTable','TRealParaTable',3,'p_TRealParaTable','Compiler.py',478),
  ('TRealParaTable -> empty','TRealParaTable',1,'p_TRealParaTable','Compiler.py',479),
  ('Para -> Expression','Para',1,'p_Para','Compiler.py',482),
  ('empty -> <empty>','empty',0,'p_empty','Compiler.py',489),
]
